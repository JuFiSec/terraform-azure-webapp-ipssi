#!/bin/bash
# test-connectivity.sh - Tests de connectivit√© complets pour l'infrastructure IPSSI
# V√©rifie tous les aspects r√©seau et connectivit√© du d√©ploiement

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables globales
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
TEST_RESULTS=()

# Fonction d'affichage header
print_header() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                üß™ TESTS DE CONNECTIVIT√â IPSSI               ‚ïë"
    echo "‚ïë              Infrastructure Web Azure - Terraform           ‚ïë"
    echo "‚ïë                                                              ‚ïë"
    echo "‚ïë  Validation compl√®te r√©seau et services d√©ploy√©s            ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo ""
    echo -e "${PURPLE}üë• √âquipe: FIENI Dannie (Chef), Kaouthar Brazi (R√©seau), Amine Karassane (BDD)${NC}"
    echo -e "${PURPLE}üéì Formation: M1 Cybers√©curit√© & Cloud Computing - IPSSI Nice${NC}"
    echo -e "${PURPLE}üìÖ Date: $(date '+%d/%m/%Y √† %H:%M')${NC}"
    echo ""
}

# Fonction de test avec rapport
run_test() {
    local test_name="$1"
    local test_command="$2"
    local is_critical="${3:-false}"
    local timeout="${4:-10}"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    echo -ne "${CYAN}üîç $test_name...${NC} "
    
    # Ex√©cution du test avec timeout
    if timeout $timeout bash -c "$test_command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ PASS${NC}"
        PASSED_TESTS=$((PASSED_TESTS + 1))
        TEST_RESULTS+=("‚úÖ $test_name: PASS")
        return 0
    else
        if [ "$is_critical" = "true" ]; then
            echo -e "${RED}‚ùå FAIL (CRITIQUE)${NC}"
            TEST_RESULTS+=("‚ùå $test_name: FAIL (CRITIQUE)")
        else
            echo -e "${YELLOW}‚ö†Ô∏è FAIL${NC}"
            TEST_RESULTS+=("‚ö†Ô∏è $test_name: FAIL")
        fi
        FAILED_TESTS=$((FAILED_TESTS + 1))
        return 1
    fi
}

# Fonction de test avec d√©tails
run_detailed_test() {
    local test_name="$1"
    local test_command="$2"
    local success_message="$3"
    local error_message="$4"
    
    echo -e "${CYAN}üîç Test: $test_name${NC}"
    echo "   Commande: $test_command"
    
    if eval "$test_command"; then
        echo -e "   ${GREEN}‚úÖ R√©sultat: $success_message${NC}"
        return 0
    else
        echo -e "   ${RED}‚ùå Erreur: $error_message${NC}"
        return 1
    fi
    echo ""
}

# V√©rification des pr√©requis
check_prerequisites() {
    echo -e "${YELLOW}üìã V√©rification des pr√©requis...${NC}"
    echo ""
    
    run_test "Terraform install√©" "command -v terraform" true
    run_test "Azure CLI install√©" "command -v az" true
    run_test "Curl install√©" "command -v curl" true
    run_test "Netcat install√©" "command -v nc || command -v netcat" false
    run_test "Ping disponible" "command -v ping" true
    
    # V√©rifier si l'infrastructure est d√©ploy√©e
    if ! terraform state list > /dev/null 2>&1; then
        echo -e "${RED}‚ùå Infrastructure non d√©ploy√©e. Lancez 'terraform apply' d'abord.${NC}"
        exit 1
    fi
    
    echo ""
}

# R√©cup√©ration des informations Terraform
get_terraform_outputs() {
    echo -e "${YELLOW}üìä R√©cup√©ration des informations d'infrastructure...${NC}"
    echo ""
    
    # Variables globales pour les tests
    PUBLIC_IP=$(terraform output -raw public_ip_address 2>/dev/null || echo "")
    WEBSITE_URL=$(terraform output -raw website_url 2>/dev/null || echo "")
    SSH_COMMAND=$(terraform output -raw ssh_connection_command 2>/dev/null || echo "")
    RESOURCE_GROUP=$(terraform output -raw resource_group_name 2>/dev/null || echo "")
    VM_NAME=$(terraform output -raw vm_name 2>/dev/null || echo "")
    MYSQL_SERVER=$(terraform output -raw mysql_server_name 2>/dev/null || echo "")
    STORAGE_ACCOUNT=$(terraform output -raw storage_account_name 2>/dev/null || echo "")
    
    echo -e "${BLUE}üìã Informations r√©cup√©r√©es:${NC}"
    echo -e "   ‚Ä¢ IP Publique: ${GREEN}$PUBLIC_IP${NC}"
    echo -e "   ‚Ä¢ Site Web: ${GREEN}$WEBSITE_URL${NC}"
    echo -e "   ‚Ä¢ Groupe de ressources: ${GREEN}$RESOURCE_GROUP${NC}"
    echo -e "   ‚Ä¢ Machine virtuelle: ${GREEN}$VM_NAME${NC}"
    echo -e "   ‚Ä¢ Serveur MySQL: ${GREEN}$MYSQL_SERVER${NC}"
    
    if [ -z "$PUBLIC_IP" ] || [ -z "$WEBSITE_URL" ]; then
        echo -e "${RED}‚ùå Informations manquantes. V√©rifiez le d√©ploiement Terraform.${NC}"
        exit 1
    fi
    
    echo ""
}

# Tests de connectivit√© r√©seau de base
test_basic_connectivity() {
    echo -e "${YELLOW}üåê SECTION 1: Tests de Connectivit√© R√©seau${NC}"
    echo "================================================"
    echo ""
    
    # Test ping vers l'IP publique
    echo -e "${CYAN}üèì Test de ping vers l'infrastructure...${NC}"
    run_detailed_test "Ping vers IP publique" \
        "ping -c 3 -W 5 $PUBLIC_IP" \
        "Serveur accessible via ping" \
        "Serveur non accessible ou filtre ICMP actif"
    
    # Test de r√©solution DNS (si applicable)
    if [[ $WEBSITE_URL =~ ^http://([^/]+) ]]; then
        HOSTNAME="${BASH_REMATCH[1]}"
        echo -e "${CYAN}üåç Test de r√©solution DNS...${NC}"
        run_detailed_test "R√©solution DNS" \
            "nslookup $HOSTNAME" \
            "DNS r√©solu correctement" \
            "Probl√®me de r√©solution DNS"
    fi
    
    echo ""
}

# Tests des ports et services
test_ports_and_services() {
    echo -e "${YELLOW}üö™ SECTION 2: Tests des Ports et Services${NC}"
    echo "=============================================="
    echo ""
    
    echo -e "${CYAN}üîå Test des ports critiques...${NC}"
    
    # Test port SSH (22)
    run_detailed_test "Port SSH (22)" \
        "nc -zv -w 5 $PUBLIC_IP 22" \
        "Port SSH ouvert et accessible" \
        "Port SSH ferm√© ou inaccessible"
    
    # Test port HTTP (80)
    run_detailed_test "Port HTTP (80)" \
        "nc -zv -w 5 $PUBLIC_IP 80" \
        "Port HTTP ouvert et accessible" \
        "Port HTTP ferm√© ou inaccessible"
    
    # Test port HTTPS (443) - optionnel
    run_detailed_test "Port HTTPS (443)" \
        "nc -zv -w 5 $PUBLIC_IP 443" \
        "Port HTTPS ouvert" \
        "Port HTTPS ferm√© (normal si pas configur√©)"
    
    echo ""
    
    # Scan nmap si disponible
    if command -v nmap &> /dev/null; then
        echo -e "${CYAN}üîç Scan Nmap des ports principaux...${NC}"
        echo "R√©sultats du scan:"
        nmap -p 22,80,443 $PUBLIC_IP | grep -E "(open|closed|filtered)" || echo "Aucun port d√©tect√©"
        echo ""
    fi
}

# Tests du serveur web
test_web_server() {
    echo -e "${YELLOW}üåê SECTION 3: Tests du Serveur Web${NC}"
    echo "======================================="
    echo ""
    
    echo -e "${CYAN}üåç Test de r√©ponse HTTP...${NC}"
    
    # Test de base HTTP
    run_detailed_test "R√©ponse HTTP 200" \
        "curl -s -o /dev/null -w '%{http_code}' $WEBSITE_URL | grep -q '200'" \
        "Serveur web r√©pond correctement (HTTP 200)" \
        "Serveur web ne r√©pond pas ou erreur HTTP"
    
    # Test des en-t√™tes HTTP
    echo -e "${CYAN}üìã Analyse des en-t√™tes HTTP...${NC}"
    echo "En-t√™tes de r√©ponse:"
    curl -I $WEBSITE_URL 2>/dev/null | head -10 || echo "Impossible de r√©cup√©rer les en-t√™tes"
    echo ""
    
    # Test du contenu sp√©cifique IPSSI
    echo -e "${CYAN}üéì V√©rification du contenu IPSSI...${NC}"
    run_detailed_test "Contenu IPSSI pr√©sent" \
        "curl -s $WEBSITE_URL | grep -i 'IPSSI'" \
        "Page contient les r√©f√©rences IPSSI" \
        "Contenu IPSSI manquant sur la page"
    
    # Test des informations d'√©quipe
    run_detailed_test "Informations √©quipe pr√©sentes" \
        "curl -s $WEBSITE_URL | grep -E '(FIENI|Kaouthar|Amine)'" \
        "Noms de l'√©quipe pr√©sents sur la page" \
        "Informations d'√©quipe manquantes"
    
    # Test PHP
    run_detailed_test "PHP fonctionnel" \
        "curl -s $WEBSITE_URL | grep -i 'php'" \
        "PHP fonctionne et affiche les informations" \
        "PHP non fonctionnel ou non configur√©"
    
    echo ""
}

# Tests de performance web
test_web_performance() {
    echo -e "${YELLOW}‚ö° SECTION 4: Tests de Performance Web${NC}"
    echo "========================================="
    echo ""
    
    echo -e "${CYAN}‚è±Ô∏è Mesure des temps de r√©ponse...${NC}"
    
    # Test de temps de r√©ponse
    RESPONSE_TIME=$(curl -w '%{time_total}' -s -o /dev/null $WEBSITE_URL)
    echo "Temps de r√©ponse total: ${RESPONSE_TIME}s"
    
    # V√©rifier que le temps est acceptable (< 5 secondes)
    run_test "Temps de r√©ponse acceptable (< 5s)" \
        "[ \$(echo \"$RESPONSE_TIME < 5.0\" | bc -l) -eq 1 ]" false 30
    
    # Test de taille de r√©ponse
    RESPONSE_SIZE=$(curl -w '%{size_download}' -s -o /dev/null $WEBSITE_URL)
    echo "Taille de la r√©ponse: ${RESPONSE_SIZE} bytes"
    
    run_test "Taille de r√©ponse significative (> 1KB)" \
        "[ $RESPONSE_SIZE -gt 1024 ]" false
    
    # Analyse d√©taill√©e des temps
    echo ""
    echo -e "${CYAN}üìä Analyse d√©taill√©e des performances:${NC}"
    curl -w "@-" -o /dev/null -s $WEBSITE_URL << 'EOF'
     time_namelookup:  %{time_namelookup}s
        time_connect:  %{time_connect}s
     time_appconnect:  %{time_appconnect}s
    time_pretransfer:  %{time_pretransfer}s
       time_redirect:  %{time_redirect}s
  time_starttransfer:  %{time_starttransfer}s
                     ----------
          time_total:  %{time_total}s
EOF
    echo ""
}

# Tests SSH et acc√®s syst√®me
test_ssh_access() {
    echo -e "${YELLOW}üîê SECTION 5: Tests d'Acc√®s SSH${NC}"
    echo "==================================="
    echo ""
    
    # V√©rifier que la cl√© SSH existe
    if [ ! -f ~/.ssh/id_rsa ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Cl√© SSH priv√©e non trouv√©e. Tests SSH ignor√©s.${NC}"
        return
    fi
    
    echo -e "${CYAN}üîë Test de connexion SSH...${NC}"
    
    # Test de connexion SSH basique
    run_detailed_test "Connexion SSH √©tablie" \
        "ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP 'exit'" \
        "Connexion SSH r√©ussie" \
        "Impossible de se connecter en SSH"
    
    # Tests via SSH si la connexion fonctionne
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP 'exit' 2>/dev/null; then
        echo ""
        echo -e "${CYAN}üñ•Ô∏è Tests syst√®me via SSH...${NC}"
        
        # Test des services
        echo "√âtat des services critiques:"
        ssh -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP << 'EOF'
echo "‚Ä¢ Apache2: $(systemctl is-active apache2)"
echo "‚Ä¢ UFW Firewall: $(systemctl is-active ufw)"
echo "‚Ä¢ SSH: $(systemctl is-active ssh)"
EOF
        
        echo ""
        echo "Informations syst√®me:"
        ssh -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP << 'EOF'
echo "‚Ä¢ OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
echo "‚Ä¢ Kernel: $(uname -r)"
echo "‚Ä¢ Uptime: $(uptime -p)"
echo "‚Ä¢ Espace disque: $(df -h / | tail -1 | awk '{print $4}') disponible"
echo "‚Ä¢ M√©moire libre: $(free -h | grep Mem | awk '{print $7}')"
EOF
        echo ""
        
        # Test du serveur web local
        echo -e "${CYAN}üß™ Test du serveur web en local (via SSH)...${NC}"
        ssh -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP \
            'curl -s -o /dev/null -w "HTTP Status: %{http_code}, Time: %{time_total}s\n" localhost'
    fi
    
    echo ""
}

# Tests Azure et infrastructure
test_azure_infrastructure() {
    echo -e "${YELLOW}‚òÅÔ∏è SECTION 6: Tests Infrastructure Azure${NC}"
    echo "=========================================="
    echo ""
    
    # V√©rifier la connexion Azure
    if ! az account show > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è Non connect√© √† Azure. Tests Azure ignor√©s.${NC}"
        echo "Lancez 'az login' pour tester l'infrastructure Azure."
        return
    fi
    
    echo -e "${CYAN}üìä V√©rification des ressources Azure...${NC}"
    
    # Test du groupe de ressources
    run_detailed_test "Groupe de ressources existe" \
        "az group show --name $RESOURCE_GROUP" \
        "Groupe de ressources accessible" \
        "Groupe de ressources introuvable"
    
    # Compter les ressources
    if [ ! -z "$RESOURCE_GROUP" ]; then
        RESOURCE_COUNT=$(az resource list --resource-group $RESOURCE_GROUP --query 'length(@)' 2>/dev/null || echo "0")
        echo "Nombre de ressources d√©ploy√©es: $RESOURCE_COUNT"
        
        run_test "Ressources suffisantes d√©ploy√©es (‚â•10)" \
            "[ $RESOURCE_COUNT -ge 10 ]" true
        
        # Test de la VM
        if [ ! -z "$VM_NAME" ]; then
            run_detailed_test "Machine virtuelle en cours d'ex√©cution" \
                "az vm show --resource-group $RESOURCE_GROUP --name $VM_NAME --show-details --query 'powerState' | grep 'VM running'" \
                "VM en cours d'ex√©cution" \
                "VM arr√™t√©e ou probl√®me d'√©tat"
        fi
        
        # Test MySQL
        if [ ! -z "$MYSQL_SERVER" ]; then
            run_detailed_test "Serveur MySQL op√©rationnel" \
                "az mysql flexible-server show --resource-group $RESOURCE_GROUP --name $MYSQL_SERVER --query 'state' | grep 'Ready'" \
                "MySQL en √©tat Ready" \
                "MySQL non op√©rationnel"
        fi
        
        # Test Storage
        if [ ! -z "$STORAGE_ACCOUNT" ]; then
            run_detailed_test "Compte de stockage disponible" \
                "az storage account show --resource-group $RESOURCE_GROUP --name $STORAGE_ACCOUNT --query 'statusOfPrimary' | grep 'available'" \
                "Stockage disponible" \
                "Probl√®me avec le stockage"
        fi
    fi
    
    echo ""
}

# Tests de s√©curit√©
test_security() {
    echo -e "${YELLOW}üîí SECTION 7: Tests de S√©curit√©${NC}"
    echo "===================================="
    echo ""
    
    echo -e "${CYAN}üõ°Ô∏è V√©rification de la s√©curit√© r√©seau...${NC}"
    
    # Test que MySQL n'est PAS accessible depuis Internet (bon signe de s√©curit√©)
    MYSQL_HOST=$(terraform output -raw mysql_server_fqdn 2>/dev/null || echo "")
    if [ ! -z "$MYSQL_HOST" ]; then
        run_detailed_test "MySQL non accessible depuis Internet (s√©curis√©)" \
            "! nc -zv -w 5 $MYSQL_HOST 3306" \
            "MySQL correctement s√©curis√© (non accessible)" \
            "ATTENTION: MySQL accessible depuis Internet!"
    fi
    
    # Test de l'authentification SSH
    echo -e "${CYAN}üîê Test de s√©curit√© SSH...${NC}"
    
    # V√©rifier que l'authentification par mot de passe est d√©sactiv√©e
    if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP 'exit' 2>/dev/null; then
        echo "V√©rification configuration SSH:"
        ssh -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP \
            'sudo grep "PasswordAuthentication\|PubkeyAuthentication" /etc/ssh/sshd_config | grep -v "^#"' || echo "Configuration SSH par d√©faut"
    fi
    
    # Test des ports ouverts (seulement ceux autoris√©s)
    echo -e "${CYAN}üö™ V√©rification des ports ouverts...${NC}"
    if command -v nmap &> /dev/null; then
        echo "Scan des ports 1-1000:"
        OPEN_PORTS=$(nmap -p 1-1000 $PUBLIC_IP | grep "open" | wc -l)
        echo "Ports ouverts d√©tect√©s: $OPEN_PORTS"
        
        # Normalement, seuls 22 et 80 devraient √™tre ouverts
        run_test "Nombre de ports ouverts s√©curis√© (‚â§3)" \
            "[ $OPEN_PORTS -le 3 ]" false
    fi
    
    echo ""
}

# Tests d'int√©gration compl√®te
test_full_integration() {
    echo -e "${YELLOW}üîÑ SECTION 8: Test d'Int√©gration Compl√®te${NC}"
    echo "============================================"
    echo ""
    
    echo -e "${CYAN}üß™ Sc√©nario de test bout-en-bout...${NC}"
    
    # Sc√©nario: Utilisateur visite le site
    echo "1. Un utilisateur acc√®de au site web..."
    if curl -s $WEBSITE_URL > /tmp/webpage_content.html; then
        echo -e "   ${GREEN}‚úÖ Page web t√©l√©charg√©e${NC}"
        
        # V√©rifier le contenu t√©l√©charg√©
        if grep -q "IPSSI" /tmp/webpage_content.html; then
            echo -e "   ${GREEN}‚úÖ Contenu IPSSI v√©rifi√©${NC}"
        fi
        
        if grep -q "FIENI\|Kaouthar\|Amine" /tmp/webpage_content.html; then
            echo -e "   ${GREEN}‚úÖ Informations √©quipe v√©rifi√©es${NC}"
        fi
        
        # Nettoyer
        rm -f /tmp/webpage_content.html
    else
        echo -e "   ${RED}‚ùå Impossible de t√©l√©charger la page${NC}"
    fi
    
    echo ""
    echo "2. Administrateur se connecte en SSH..."
    if ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no adminuser@$PUBLIC_IP 'whoami && pwd' > /tmp/ssh_test.out 2>/dev/null; then
        echo -e "   ${GREEN}‚úÖ Connexion SSH administrateur r√©ussie${NC}"
        echo "   Utilisateur connect√©: $(cat /tmp/ssh_test.out | head -1)"
        rm -f /tmp/ssh_test.out
    else
        echo -e "   ${RED}‚ùå √âchec de la connexion SSH${NC}"
    fi
    
    echo ""
    echo "3. Test de charge basique..."
    # Test de 10 requ√™tes simultan√©es
    echo "Envoi de 10 requ√™tes HTTP simultan√©es..."
    for i in {1..10}; do
        curl -s -o /dev/null $WEBSITE_URL &
    done
    wait
    echo -e "   ${GREEN}‚úÖ Test de charge basique termin√©${NC}"
    
    echo ""
}

# G√©n√©ration du rapport final
generate_final_report() {
    echo -e "${BLUE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üìä RAPPORT FINAL                         ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo ""
    
    # Statistiques
    echo -e "${CYAN}üìà Statistiques des Tests:${NC}"
    echo -e "   ‚Ä¢ Total des tests: $TOTAL_TESTS"
    echo -e "   ‚Ä¢ Tests r√©ussis: ${GREEN}$PASSED_TESTS${NC} ‚úÖ"
    echo -e "   ‚Ä¢ Tests √©chou√©s: ${RED}$FAILED_TESTS${NC} ‚ùå"
    
    PERCENTAGE=$((PASSED_TESTS * 100 / TOTAL_TESTS))
    echo -e "   ‚Ä¢ Taux de r√©ussite: ${PURPLE}$PERCENTAGE%${NC}"
    
    echo ""
    
    # √âvaluation
    if [ $PERCENTAGE -ge 90 ]; then
        echo -e "${GREEN}üéâ EXCELLENT ! Infrastructure parfaitement fonctionnelle${NC}"
        GRADE="A+ (Excellent)"
    elif [ $PERCENTAGE -ge 80 ]; then
        echo -e "${GREEN}üëç TR√àS BIEN ! Infrastructure op√©rationnelle${NC}"
        GRADE="A (Tr√®s Bien)"
    elif [ $PERCENTAGE -ge 70 ]; then
        echo -e "${YELLOW}‚úîÔ∏è BIEN ! Infrastructure fonctionnelle avec quelques points d'am√©lioration${NC}"
        GRADE="B (Bien)"
    elif [ $PERCENTAGE -ge 60 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è PASSABLE ! Infrastructure partiellement fonctionnelle${NC}"
        GRADE="C (Passable)"
    else
        echo -e "${RED}‚ùå INSUFFISANT ! R√©visions n√©cessaires${NC}"
        GRADE="D (Insuffisant)"
    fi
    
    echo -e "${PURPLE}üéì √âvaluation: $GRADE${NC}"
    
    # Informations pour d√©monstration
    echo ""
    echo -e "${CYAN}üéØ Informations pour la D√©monstration:${NC}"
    echo -e "   ‚Ä¢ Site web: ${GREEN}$WEBSITE_URL${NC}"
    echo -e "   ‚Ä¢ IP publique: ${GREEN}$PUBLIC_IP${NC}"
    echo -e "   ‚Ä¢ Connexion SSH: ${GREEN}$SSH_COMMAND${NC}"
    echo -e "   ‚Ä¢ Groupe de ressources: ${GREEN}$RESOURCE_GROUP${NC}"
    
    
    # Sauvegarde du rapport
    REPORT_FILE="test-connectivity-report-$(date +%Y%m%d-%H%M%S).txt"
    {
        echo "RAPPORT DE TESTS DE CONNECTIVIT√â - TP TERRAFORM IPSSI"
        echo "======================================================"
        echo "Date: $(date)"
        echo "√âquipe: FIENI DANNIE (Chef), Kaouthar Brazi (R√©seau), Amine Karassane (BDD)"
        echo ""
        echo "R√âSULTATS:"
        for result in "${TEST_RESULTS[@]}"; do
            echo "$result"
        done
        echo ""
        echo "STATISTIQUES:"
        echo "Total: $TOTAL_TESTS tests"
        echo "R√©ussis: $PASSED_TESTS"
        echo "√âchou√©s: $FAILED_TESTS"
        echo "Taux de r√©ussite: $PERCENTAGE%"
        echo "√âvaluation: $GRADE"
        echo ""
        echo "INFORMATIONS INFRASTRUCTURE:"
        echo "Site web: $WEBSITE_URL"
        echo "IP publique: $PUBLIC_IP"
        echo "SSH: $SSH_COMMAND"
        echo "Groupe de ressources: $RESOURCE_GROUP"
    } > $REPORT_FILE
    
    echo ""
    echo -e "${BLUE}üìÑ Rapport sauvegard√©: $REPORT_FILE${NC}"
    echo ""
    echo -e "${GREEN}‚ú® Tests de connectivit√© termin√©s ! Bonne chance pour votre soutenance IPSSI ! üöÄ${NC}"
}

# Fonction principale
main() {
    print_header
    
    # V√©rifications pr√©alables
    check_prerequisites
    
    # R√©cup√©ration des informations
    get_terraform_outputs
    
    # Ex√©cution des tests par section
    test_basic_connectivity
    test_ports_and_services
    test_web_server
    test_web_performance
    test_ssh_access
    test_azure_infrastructure
    test_security
    test_full_integration
    
    # Rapport final
    generate_final_report
}

# Gestion des signaux
trap 'echo -e "\n${YELLOW}üõë Tests interrompus${NC}"; exit 1' INT TERM

# Point d'entr√©e
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi